double  x;
scanf("%lf",&x);
if(x<0)｛                   //条件
    x=x*-1;             //语句块
｝
printf("%lf",x);



int x;
scanf("%d",&x);
if(x%2==0){
    printf(偶数）;
}
else{
    printf("奇数");
}


x=x*-1  //x=-x  或者x*=-1
a=a+k    //a+=k

172.24.10.6

int main() {
	int num,a,b,c;//定义 
	
	num=100;num<=999;
	scanf("%d",&num);
	{a=num/100
	b=(num%100)/10;//取余后再除去 
	c=num%10;
	if(num==a^3+b^3+c^3)
	{
	printf("%-5d是水仙花数",num);
    }
	else {printf("%-5d不是水仙花数",num); }
	} 
	return 0;
}

逻辑运算符
逻辑与：条件1 && 条件2，两个条件同时满足
逻辑或：条件1 || 条件2，两个条件满足其一
逻辑非：！（条件），把条件取反
三种逻辑运算的优先级：
逻辑非》逻辑与》逻辑或



与循环相关的语句
1.for 语句
2.while
3.do while
4. break
5.continue
for(循环化；循环条件；步长变化）｛
    循环体
｝
1） 循环化
2） 循环条件，满足条件，进入循环体；不满足条件，退出循环。
3） 执行循环体
4)  步长变化
5) 转入2） 

一、内存的结构
一片连续的存储空间，8个二进制位为一个字节，C语言可以直接操纵每个二进制位，也可以操纵每个字节，还可以操纵多个连续的字节组成的空间。

二、sizeof运算符
sizeof i 返回变量i占几个字节
sizeof（i）

三、指针的概念
指针有两种含义，有时指的是内存的地址，有时指的是存放地址的变量。

四、指针的声明
数据类型* 变量名称；
数据类型 *变量名称；
int* p;//*是指针的声明符
int *p;//指针变量是p，而不是*p
p是一个指针变量，p里面存放的就是内存地址，这块（连续的）内存中存放的是一个整数。


五、指针的运算
1. 赋值
int *p, *q;
p=.....;
q=p;

2.取地址（对于普通变量进行的运算）
int i=5;
int *p;
p=&i;//把变量i的首地址送给指针p

double d=3.14;
int *p;
p=&d;//把double的前4个字节内容以整数的形式存放，是无意义的做法

3.解引用（把指针所指向的内存中的值取出）
int i=8;
int *p;
p=&i;
*p=10;//此处的*是解引用的运算符

4. 相等、不等
int i=5,i=7;
int *p, *q;
p=&i;
q=&i;
if(q!=p){.......}
else {.......}
六、指针的初始化
int *p;
p=&i;

七、指针的输入输出
int *q;
scanf("%p",&q);
printf("%p",q);

八、空指针
内存空间为0号的空间叫做空指针，NULL
int a=5;
int *pa=&a;

int *q=NULL;

九、野指针
没有明确指向的指针，一个定义过但未被赋过值（地址值）的指针就是野指针。
操作野指针有风险！！！
应该避免操作野指针。每个指针定义之后一定进行初始化或赋值。

十、指向常量的指针
const int i=5;
const int *pi=&i;//pi是一个指向常量i的指针，不能通过对pi的间接引用改变对应内存中的值，即不能改变i的值。

十一、常量指针（const指针）
int i=5,j=8;
int * const p=&i;//p是一个常量指针，意思是p永远只能指向i，不能指向别的内存区域
p=&j; //非法 ，p不能指向其他位置
(*p)++;//合法，p指向的内容是一个普通整数，值是可以改变的。

一、数组的含义和用途
一组类型相同并且在内存中连续存储的数据

二、定义方式
数据类型 数组名陈 [长度]；
int a[10];

三、初始化
int a[10]={5,3,9,10,3,0,-1,8,1,2};
int b[10]={5,3,9};
int c[10]={5,3,9,10,3,0,-1,8,1,2,11};
int d[]={5,3,9};
int e[10];
e={5,3,9,10,3,0,-1,8,1,2};//错


四、数组的下标与元素的访问
int a[10];
a[0]=10;
a[1]=9;
a[10]=6;//错

五、数组与指针
当指针指向数组中的某个元素时，该指针可以进行更多的运算：
1.加减
int a[10]={1,2,3,4,5,6,7,8,9,10};
int *p=&a[0];
此时p可以进行加减运算，p+i表示从p当前指向的位置向后移动i步（1步是一个元素所占空间），p-i表示从p向前位置向前移动i步。

2.自增，自减
p++; p--; ++p; --p;

3.两个指向同一数组中元素的指针，可以进行减法操作
int a[10]={1,2,3,4,5,6,7,8,9,10};
int *p=&a[0],*q=&a[8];
p-q是有效的运算，含义是这两个指针所指向的元素差几个位置。

（二）数组名称通常可以当成数组首元素的指针
int a[10]={1,2,3,4,5,6,7,8,9,10};
&a[0]==a;
int i;
for(i=0;i<10;i++)
	 printf("%d",*（a+i));
printf("%d\n",3[a]);//访问数组元素
结论：
*(a+i)等价于a[i]
编译器遇到a[i]时，会自动转换成*(a+i) 又等价于*(i+a)又等价于i[a]
六、字符数组、字符串
（1） 输出
printf(“%s”,c2);
puts(c2);   //这种输出会输出c2字符串再自动加个换行
（2）输入
scanf(“%s”,c3);   //不在c3前加&，遇到空格，回车或tab便会停止输入

gets(c3);  //从键盘读入一行存入c3
#include <stdio.h>
#include <string.h> 
int main() {
	char c1[30],c2[30];
	scanf("%s",c1);
	gets(c2);
	printf("%s\n",c1);
	puts(c2);
	return 0;
}

输入you are a student   输出的c1遇到空格停止输入c1的输出为you。
c2的输出者为自动转入的 are a student 

（3）获取字符串长度
#include <stdio.h>
#include  <string.h>
int main(){
   strlen;//去掉最后\0的部分长度
   char c1[8]={'a','b','c','d','\0'};
printf(“%d\n”,strlen(c1));//输出4，所键入的有效长度
printf(“%d\n”,sizeof(c1));//输出8，是整体定义的长度
}

（4）字符串比较
“abc”  “abcd”
strcmp(串1，串2).
#include <stdio.h>
#include <string>
int main(){
   char c1[8]="abc",c2[8]="abcd";
   printf("%d\n",strcmp(c1,c2));//输出-1
return 0;
}
如果串1<串2 返回值-1
如果串1>串2 返回值1
如果串1=串2 返回值0
(5)字符串连接
strcat(目标串，原始串)；
把原始串追加到目标串的后面
#include <stdio.h>
#include  <string.h>
int main(){
   strlen;//去掉最后\0的部分长度
   char c1[10]="abc",c2[10]="def";
   strcat(c2,c1);
   printf("%s\n%s",c2,c1);输出defabc  abc
}

（6）字符串拷贝
strcpy(目标串，原始串)；
把原始串拷贝到目标串
#include <stdio.h>
#include  <string.h>
int main(){
   char c1[10]="abc",c2[10]="ABCDE";     //c1会将c2覆盖（不管两字符串长度是否一样）
   strcpy(c2,c1);
   printf("%s\n",c2);     //输出abc
   printf("%c\n",c2[4]);    //输出E
}
（7）带长度拷贝
strncpy(目标串，原始串，长度);
#include <stdio.h>
#include  <string.h>
int main(){
   char c1[10]="abcd",c2[3];
   strncpy(c2,c1,3);   //前面定义的abcd 但是覆盖之后，定义了3个字符，则只输出abc。
   printf("%s\n",c2);
}

一、内存的划分
1.全局区(global)
全局变量所在的区域，全局变量就是不在任何函数之内定义的变量。

2.栈区(stack)
在栈区的内容遵循一个特性：先进后出。
局部变量（定义在函数内部的变量）放在栈区，每个函数都有自己的栈，在程序执行过程中，如果调用了一个函数，该函数所需要的栈内存才会申请，该函数内部的变量都放在这个栈区，该函数执行完毕，这个栈会自动销毁。栈区中的变量执行速度是最快的。

3.堆区(heap)
可以由程序员通过malloc、calloc等函数申请并自行管理的内存区域。该区域中的变量在程序员申请时诞生，由程序员负责释放，编译器以及操作系统不负责对其管理。
堆区的内存执行速度较慢。

4.代码区
编译之后二进制码所在的内存区域，嵌入式编程会关注该区域。

二、函数
能够完成一个特定功能的代码段，拥有自己的名称，可能还拥有参数和返回值。
当代码中有反复书写或者执行的部分
抽取出来写成函数。

函数定义的语法
返回值 函数名称（形式参数列表）｛
	函数体
｝

函数调用的语法
函数名（实际参数列表）；

调用时会把实际参数的值按照顺序赋值给对应的形式参数，形式参数相当于在函数内部的局部变量。

如果想在函数内部修改外部的内容，形式参数需要使用指针。
