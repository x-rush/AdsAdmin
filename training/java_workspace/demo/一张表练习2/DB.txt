数据库：是按照数据结构来组织、存储和管理数据 的仓库 DataBase

常见数据库：
Oracle  DB2  SQL SERVER   PostgreSQL  MYSQL

DBS  数据库系统   
	数据库DB
	数据库管理系统DBMS  Database Managment System
	应用开发工具
	管理员和用户
SQL语言：
	结构化查询语言 Structured Query Language
	DDL：数据定义语言
	DML：数据操作语言
	DQL：数据查询语言
	DCL：数据控制语言

配置文件：my.ini  / my.cnf
Mysql安装    Navicat可视化客户端软件

MYSQL（数据库系统）>>Database（数据库）>>Table(表) -数据落脚点>>data操作数据

数据库相关操作
  创建数据库语法格式：CREATE {DATABASE | SCHEMA} db_name;
  检查数据库是否存在：CREATE {DATABASE|SCHEMA} [IF NOT EXISTS] db_name;
  显示DB创建信息：SHOW CREATE DATABASE db_name;
  指定DB编码方式; CREATE DATABASE db_name [DEFAULT] CHARACTER SET [=] charset;
  修改DB编码方式：ALTER DATABASE db_name [DEFAULT] CHARACTER SET [=] charset;
  使用DB：USE db_name;
  当前使用的DB：SELECT DATABASE()；
  删除DB：DROP DATABASE [IF NOT EXISTS] db_name;

数据库表操作
  数库表：数据重要组成部分之一，数据保存的位置，由行列组成，列->字段，行->记录
	一个表至少有一个字段，可以没有记录
	表名要唯一，不包含特殊字符，最好含义明确
  创建表：
  CREATE TABLE [IF NOT EXISTS] tbl_name(
      字段名称   字段类型   [完整性约束条件],
      字段名称   字段类型   [完整性约束条件]，
      ....
      字段名称   字段类型   [完整性约束条件]
  ) ENGINE=引擎名称  CHARSET=编码方式;
 
 //在king数据库下创建一个user表
 CREATE TABLE IF NOT EXISTS user(
    id INT UNSIGNED NOT NULL PRIMARY KEY,
    username VARCHAR(20),
    password CHAR(32),
    email VARCHAR(50),
    age TINYINT, 
    card  CHAR(18),  
    tel CHAR(11),
    salary FLOAT(8,2),
    married TINYINT(1), 
    addr VARCHAR(100),
    sex ENUM('男','女','保密')
 ) ENGINE=INNODB CHARSET=UTF8;

查看当前DB下的表：SHOW TABLES；
查看表详细信息：SHOW CREATE TABLE user;
查看表结构：DESC tbl_name;
删除表：DROP TABLE [IF NOT EXISTS] tbl_name;
修改表：
   添加字段：ALTER TABLE tbl_name ADD 字段名称  [完整性约束条件] [FIRST|AFTER 参考字段]
   删除字段：ALTER TABLE tbl_name DROP 字段名称;   
   添加默认值：ALTER TABLE tbl_name ALTER 字段名称 SET DEFAULT 默认值;
   删除默认值：ALTER TABLE tbl_name ALTER 字段名称 DROP DEFAULT;  
   修改字段类型、属性：ALTER TABLE tbl_name MODIFY 字段名称 字段类型 [完整性约束条件] [FIRST|AFTER 参考字段]
   修改字段名、类型、属性：ALTER TABLE tbl_name CHANGE 原字段名 新字段名 字段类型 完整性约束条件 [FIRST|AFTER 参考字段]
   添加主键：ALTER TABLE tbl_name ADD PRIMARY KEY(字段名);
   删除主键：ALTER TABLE tbl_name DROP PRIMARY KEY;
   添加唯一索引：ALTER TABLE tbl_name ADD UNIQUE KEY 字段名| INDEX[index_name](字段名称);
   删除唯一索引：ALTER TABLE tbl_name DROP INDEX index_name;
  	          DROP INDEX index_name FROM table_name;
   查看索引：SHOW index|keys FROM tbl_name;
   修改表名：ALTER TABLE tbl_name RENAME [TO|AS] new_tbl_name;
	   RENAME TABLE tbl_name TO new_tbl_name;
   添加AUTO_INCREMENT：ALTER TABLE tbl_name MODIFY 字段名 字段类型 AUTO_INCREMENT；
   修改AUTO_INCREMENT值：ALTER TABLE tbl_name AUTO_INCREMENT = 值;
       *注意： ALTER TABLE tablename AUTO_INCREMENT = value;在InnoDB引擎中不起作用！！！ 

完整性约束包括
  UNSIGNED  无符号
  ZEROFILL 字段显示长度不够，前补0作为填充
  NOT NULL 非空约束
  DEFAULT 默认值为***
  PRIMARY KEY 主键，表示记录的唯一性，不能重复，一个表只能有一个主键（自动禁止为空）
  AUTO_INCREAMENT 自动增长，只能用于数值列，配合索引使用默认1开始，每次增长1
  UNIQUE KEY 唯一性，同样值不能重复出现，但NULL值除外
  FOREIGN KEY 外键约束
======================================================
MYSQL数据操作语句
添加
  语法：INSERT [INTO]  tbl_name[(col_name,....)] {VALUE|VALUES}(value,.....);
修改
  语法：UPDATE tbl_name SET 字段名 =  值， 字段名 = 值 [WHERE 条件];
删除
  语法：DELETE FROM tbl_name [WHERE 条件]；
查询
  语法：SELECT expr1,.... FROM tbl_name
	[WHERE 条件]
 	[GROUP BY {col_name|position} HAVING 二次筛选条件]
	[ORDER BY {col_name|position|expr} [ASC|DESC]]
	[LIMIT 限制结果集的显示条数]
  全字段查询：SELECT * FROM tbl_name;
  指定字段查询：SELECT 字段1，字段2，...  FROM tbl_name;
  库名.表名：SELECT 字段名1,..... FROM db_name.tbl_name;
  字段别名：SELECT 字段1 [AS] 别名, .... FROM tbl_name;
  表别名：SELECT 字段1,.... FROM tbl_name [AS] 别名;
  表名.字段名：SELECT 表名.字段名, .... FROM 表名;
  WHERE条件：
	比较运算符 ：>  <  >=  <=  !=  <=>   <>
	IS [NOT] NULL： IS null    IS NOT null
	指定范围：[NOT] BETWEEN... AND
	指定集合：[NOT] IN(值1，值2，....)
	逻辑运算符：AND  OR
	匹配字符：[NOT] LIKE 与 % _ 连用,  否则LIKE 与 =等效
  GROUP BY 分组 HAVING 二次筛选
  ORDER BY 排序
  LIMIT  限制显示条数
  DISTINCT 去重
  
=============================================================
多表查询
	笛卡尔积形式
		SELECT * FROM table1,table2;
	内连接形式：查询两个表中符合连接条件的记录
		SELECT 字段名称,.....FROM table1
		INNER JOIN table2
		ON 连接条件
	外连接形式：查询两个表中符合连接条件的记录
		左外连接：先显示左边中的全部记录，再去右表中查询符合条件的记录，不符合以NULL代替
			SELECT 字段名称,....FROM table1
			LEFT [OUTER] JOIN table2
			ON 连接条件;
		右外连接：先显示右表中的全部记录，再去左表中查询符合条件的记录，不符合以NULL代替
			SELECT 字段名称,....FROM table1
			RIGHT [OUTER] JOIN table2
			ON 连接条件;
外键约束
	1.只有InnoDB存储引擎支持外键
	2.使用外键
		>建表时指定外键
			格式：[CONSTRAINT 外键名] FOREIGN KEY(字段名)REFERENCES(字段名)
			注意：
				1.子表的外键和主表的主键字段类型要相似
				2.如果是数值型要求一致，并且无符号也要一致
				3.如果是字符型，要求类型一致，长度可以不同
				4.子表的外键关联的必须是父表的主键
		>动态添加外键
			添加：ALTER TABLE table1 [CONSTRAINT 外键名]ADD FOREIGN KEY(字段名)REFERENCES主表(主键);
			删除：ALTER TABLE table1 DROP FOREIGN KEY fk_name;
	3.外键约束
		>CASCADE:从表删除或更新，子表也跟着删除或更新，级联操作
		>SET NULL:父表删除或更新，将子表的外键列设为NULL
		>NO ACTION|RESTRICT:拒绝对父表做更新或删除操作
===========================================================================================================
子查询
	格式：SELECT 字段名 ,....FROM tbl_name WHERE col_name = (SELECT col_name FROM tbl_name);
	效果：内层









