左值和右值是程序设计中的术语。在基本的二元赋值表达式中，例如x = 1，变量x出现在=左侧，我们说x做了左值；字面常量1出现在=的右侧，我们说1做了右值。将此称呼推广，当修改内存数据的时候，我们说该数据做左值，而读取内存数据的时候，我们说该数据做右值。

1. 前置、后置++运算符与其他运算符组合使用的情况。
#include<stdio.h>
int main()
{
	int a,b,c,d;
	a=10;
	b=a++;
	c=++a;
	d=10*a++;
	printf("a,b,c,d:%d,%d,%d,%d",a,b,c,d);
	return 0;
}
结论：后置++运算能够对变量本身+1，但整个表达式的值是+1之前的值；前置++运算也是能够对变量本身+1，但整个表达式的值是+1之后的值。

2. 逗号运算符的结合顺序。
#include<stdio.h>
int main()
{
	int i = 0;
	int x , y , z;
	x = i++ , y = i++ , z = i++;
	printf("x=%d,y=%d,z=%d,i=%d\n",x,y,z,i);
	return 0;
}

#include<stdio.h> 
int main(void) 
{ 
	int a=10, b=20, c=30; 
	printf("%d,%d,%d\n", a+b+c, (b=b*2), (c=c*2)); 
	return 0; 
}

#include<stdio.h>
int main()
{
	int x,y,z;
	z=(x=3,y=5,y+=x);//括号中，从左到右，用逗号分隔的若干表达式，最后结果为最后一个表达式的结果
	printf("%d,%d,%d",x,y,z);
	return 0;
}
结论：逗号分隔的若干表达式，正常情况下按照从左到右的顺序执行，并且整个表达式的最终结果为最后（即最右边）表达式的结果，但在printf语句中，从右到左执行。

3. 变量与表达式的值
#include<stdio.h>
int main()
{
	int x;
	x = 1;
	printf("变量x等于%d\n",x);
	printf("表达式(x=2)+5等于%d\n",(x = 2) + 5);
	printf("变量x等于%d\n",x);
	return 0;
}
结论：变量本身的值可以通过赋值语句给予，也可以初始化是直接赋予；每个表达式也有自己的返回值，但该返回值只能作为右值。

设有语句int　a = 3;则执行语句a += a -= a * a后，变量a的值是 -12.

下面四个选项中，均是合法整型字面常量的选项是
A. 160、-0xffff、023
B. ffff、333、076
C. 0X29k、338、099
D. 1.234、32u、4L

在下列选项中，不合法的赋值语句是
A. t /= 5;
B. n1 = (n2 = (n3 = 0));
C. k = i = j;
D. a = b + c = 1;

设有如下的变量定义，则选项中符合C语言语法的表达式是
	int　i = 8 ,k,a,b;　
	unsigned　long　w = 5;　
	double　x = 1.42 , y = 5.2;
A. a = a -= (b = 4) * (a = 3)
B. x % (--3)
C. a = a * 3 = 2
D. y = ++(float)i
